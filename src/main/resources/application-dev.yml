# 东方财富 - session
eastmoney:
  validatekey: 2fc312a2-2730-59fa-a71a-6daf309390f0
  cookie: st_si=7845973208075; st_asi=delete; b-user-id=5gfv23hw-d31c-3f53-99ce-e660u3jhgwe102de; st_pvi=69309129852821043795; st_sp=2025-05-01%2001%3A25%3A07; st_inirUrl=https%3A%2F%2Fwww.eastmoney.com%2F; st_sn=01; st_psi=202505011000005345-11234501-282323; Yybdm=9527; Uid=XV%8dfe213safYqI7hg33522dDJSew%3D%3D; mobileimei=bda537db-b638-5d73-735ac913915f; Uuid=db7eb9edsd7603210ddfksd03093362097ad2



# 通达信-根目录
tdx-path: "C:/soft/new_tdx"



## Mysql
#spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/tdx?useSSL=false&serverTimezone=Asia/Shanghai&character_set_server=utf8mb4&useUnicode=true&characterEncoding=UTF-8&socketTimeout=150000&connectTimeout=30000
#    username: root
#    password: 123456
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    type: com.alibaba.druid.pool.DruidDataSource  # 指定连接池类型
#
#    druid:
#      # 基础连接池参数
#      initial-size: 10
#      min-idle: 10
#      max-active: 300
#      max-wait: 60000  # 获取连接超时时间（毫秒）
#
#      # 连接存活检测
#      time-between-eviction-runs-millis: 60000  # 检测间隔
#      min-evictable-idle-time-millis: 300000  # 最小空闲时间
#      test-while-idle: true  # 空闲时检测连接有效性
#      validation-query: SELECT 1  # 检测SQL
#
#      # 监控与防火墙
#      filters: stat,wall,slf4j  # 启用统计、SQL防火墙、日志
#      filter:
#        stat:
#          slow-sql-millis: 2000  # 慢SQL阈值（2秒）
#          log-slow-sql: true
#        wall:
#          enabled: true  # 启用SQL注入防御
#
#      # 监控页面配置
#      stat-view-servlet:
#        enabled: true  # 启用监控页面
#        url-pattern: /druid/*
#        login-username: admin
#        login-password: admin
#      web-stat-filter:
#        enabled: true  # 统计Web请求
#        url-pattern: /*
#        exclusions: "*.js,*.css,/druid/*"



spring:
  shardingsphere:
    props:
      sql-show: true  # 开发期建议开启，便于观测实际路由
      check-table-metadata-enabled: false  # 关闭表元数据检查，提升启动速度
      max-connections-size-per-query: 10  # 每个查询最大连接数
      acceptor-size: 64  # 接收任务线程数
      executor-size: 128  # 执行任务线程数
      proxy-backend-query-fetch-size: -1  # 代理后端查询fetch大小
      proxy-frontend-flush-threshold: 128  # 代理前端刷新阈值
      proxy-opentracing-enabled: false  # 是否启用opentracing
      proxy-hint-enabled: false  # 是否启用hint
      show-process-list-enabled: false  # 是否显示进程列表
      kernel-executor-size: 16  # 内核执行器大小
      proxy-backend-driver-type: jdbc  # 代理后端驱动类型
      cached-connections: 64  # 缓存连接数


    datasource:
      names: ds_common, ds_0, ds_1

      ds_common:
        url: jdbc:mysql://localhost:3306/tdx?useSSL=false&serverTimezone=Asia/Shanghai&character_set_server=utf8mb4&useUnicode=true&characterEncoding=UTF-8&socketTimeout=150000&connectTimeout=30000
        username: root
        password: 123456
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource

        # ===== Druid 连接池参数（确保在此处声明，才会被 Druid 生效） =====
        initial-size: 20
        min-idle: 20
        max-active: 100
        max-wait: 60000

        # 关键配置
        test-on-borrow: false
        test-on-return: false

        # 连接存活检测
        time-between-eviction-runs-millis: 60000  # 检测间隔
        min-evictable-idle-time-millis: 300000  # 最小空闲时间
        test-while-idle: true  # 空闲时检测连接有效性
        validation-query: SELECT 1  # 检测SQL

        pool-prepared-statements: true
        max-pool-prepared-statement-per-connection-size: 20
        # filters: stat,wall,log4j2
        connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        use-global-data-source-stat: true


      ds_0:
        url: jdbc:mysql://localhost:3306/tdx_bt_0?useSSL=false&serverTimezone=Asia/Shanghai&character_set_server=utf8mb4&useUnicode=true&characterEncoding=UTF-8&socketTimeout=150000&connectTimeout=30000
        username: root
        password: 123456
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource

        # ===== Druid =====
        initial-size: 20
        min-idle: 20
        max-active: 100
        max-wait: 60000
        test-on-borrow: false
        test-on-return: false
        time-between-eviction-runs-millis: 60000
        min-evictable-idle-time-millis: 300000
        test-while-idle: true
        validation-query: SELECT 1
        pool-prepared-statements: true
        max-pool-prepared-statement-per-connection-size: 20
        # filters: stat,wall,log4j2
        connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        use-global-data-source-stat: true


      ds_1:
        url: jdbc:mysql://localhost:3306/tdx_bt_1?useSSL=false&serverTimezone=Asia/Shanghai&character_set_server=utf8mb4&useUnicode=true&characterEncoding=UTF-8&socketTimeout=150000&connectTimeout=30000
        username: root
        password: 123456
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource

        # ===== Druid =====
        initial-size: 20
        min-idle: 20
        max-active: 100
        max-wait: 60000
        test-on-borrow: false
        test-on-return: false
        time-between-eviction-runs-millis: 60000
        min-evictable-idle-time-millis: 300000
        test-while-idle: true
        validation-query: SELECT 1
        pool-prepared-statements: true
        max-pool-prepared-statement-per-connection-size: 20
        # filters: stat,wall,log4j2
        connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        use-global-data-source-stat: true


    rules:
      sharding:
        # 默认数据库分片策略
        default-database-strategy:
          standard:
            sharding-column: task_id
            sharding-algorithm-name: db-inline

        tables:
          bt_trade_record:
            actual-data-nodes: ds_$->{0..1}.bt_trade_record_$->{0..99}
            table-strategy:
              standard:
                sharding-column: task_id
                sharding-algorithm-name: trade-table-inline
            # 添加主键生成策略
            key-generate-strategy:
              column: id
              key-generator-name: snowflake

          bt_position_record:
            actual-data-nodes: ds_$->{0..1}.bt_position_record_$->{0..99}
            table-strategy:
              standard:
                sharding-column: task_id
                sharding-algorithm-name: position-table-inline
            # 添加主键生成策略
            key-generate-strategy:
              column: id
              key-generator-name: snowflake


        sharding-algorithms:
          db-inline:
            type: INLINE
            props:
              algorithm-expression: ds_$->{task_id % 2}
              # algorithm-expression: ds_$->{((task_id.longValue() / 100) as int) % 2}
          trade-table-inline:
            type: INLINE
            props:
              algorithm-expression: bt_trade_record_$->{((task_id.longValue() / 2) as int) % 100}
              # algorithm-expression: bt_trade_record_$->{task_id % 100}
          position-table-inline:
            type: INLINE
            props:
              algorithm-expression: bt_position_record_$->{((task_id.longValue() / 2) as int) % 100}
              # algorithm-expression: bt_position_record_$->{task_id % 100}


        # 主键生成器配置
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 123


        # 绑定表配置（大表 join 优化）
        binding-tables:
          - bt_trade_record, bt_position_record





  # WebStatFilter 配置
  datasource:
    druid:
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: admin
        login-password: admin
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        session-stat-enable: true
        session-stat-max-count: 1000
        principal-session-name: user
        principal-cookie-name: user
        profile-enable: true
